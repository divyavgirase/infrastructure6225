{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Cloud Formation template for VPC, Subnets, Internet Gateway and Route Table",
  "Parameters": {
    "VPCName": {
      "Type": "String",
      "Default": "myVPC",
      "Description": "Enter name for VPC",
      "NoEcho": true
    },
    "VPCCIDRBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "Enter CIDR range for VPC",
      "NoEcho": true
    },
    "Subnet01CIDR": {
      "Type": "String",
      "Default": "10.0.16.0/20",
      "Description": "Enter CIDR range for Subnet01",
      "NoEcho": true
    },
    "Subnet02CIDR": {
      "Type": "String",
      "Default": "10.0.32.0/20",
      "Description": "Enter CIDR range for Subnet02",
      "NoEcho": true
    },
    "Subnet03CIDR": {
      "Type": "String",
      "Default": "10.0.48.0/20",
      "Description": "Enter CIDR range for Subnet03",
      "NoEcho": true
    },
    "Subnet01AvailabilityZone": {
      "Type": "String",
      "Default": "us-east-1f",
      "Description": "Enter Avilability Zone for Subnet01",
      "NoEcho": true
    },
    "Subnet02AvailabilityZone": {
      "Type": "String",
      "Default": "us-east-1a",
      "Description": "Enter Avilability Zone for Subnet02",
      "NoEcho": true
    },
    "Subnet03AvailabilityZone": {
      "Type": "String",
      "Default": "us-east-1b",
      "Description": "Enter Avilability Zone for Subnet03",
      "NoEcho": true
    },
    "dbuser" : {
      "Type" : "String",
      "Default" : "postgres",
      "NoEcho" : true
    },
    "dbpswd" : {
      "Type" : "String",
      "Default" : "postgres",
      "NoEcho" : true
    },
    "RDSInstanceSize" : {
      "Type" : "String",
      "Default" : "5",
      "NoEcho" : true
    },
    "EC2InstanceSize" : {
      "Type" : "String",
      "Default" : "20",
      "NoEcho" : true
    },
    "AMIID" : {
      "Type" : "String",
      "Default" : "",
      "NoEcho" : true
    },
    "awskey" : {
      "Type" : "String",
      "Default" : "awswebapp",
      "NoEcho" : true
    },
    "AccountID" : {
      "Type" : "String",
      "Default" : "426074488037",
      "NoEcho" : true
    },
    "AWSRegion" : {
      "Type" : "String",
      "Default" : "us-east-1",
      "NoEcho" : true
    }
  },
  "Resources": {
    "myVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDRBlock"
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Ref":"VPCName"}
          }
        ]
      }
    },
    "mySubnetRegion1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "CidrBlock": {
          "Ref": "Subnet01CIDR"
        },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch": "true",
        "Tags": [
          {
            "Key": "subnetRegion",
            "Value": "Region1"
          }
        ]
      }
    },
    "mySubnetRegion1TableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "mySubnetRegion1"
        },
        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },
    "mySubnetRegion2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "CidrBlock": {
          "Ref": "Subnet02CIDR"
        },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch": "true",
        "Tags": [
          {
            "Key": "subnetRegion",
            "Value": "Region2"
          }
        ]
      }
    },
    "mySubnetRegion2TableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "mySubnetRegion2"
        },
        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },
    "mySubnetRegion3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "CidrBlock": {
          "Ref": "Subnet03CIDR"
        },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch": "true",
        "Tags": [
          {
            "Key": "subnetRegion",
            "Value": "Region3"
          }
        ]
      }
    },
    "mySubnetRegion3TableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "mySubnetRegion3"
        },
        "RouteTableId": {
          "Ref": "myRouteTable"
        }
      }
    },
    "myInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "internetGatewayFor",
            "Value": "myVPC"
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "InternetGatewayId": {
          "Ref": "myInternetGateway"
        }
      }
    },
    "myRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "Tags": [
          {
            "Key": "routeTableFor",
            "Value": "myVPC"
          }
        ]
      }
    },
    "myRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "myRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "myInternetGateway"
        }
      }
    },

    "webappSG" :  {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
       "GroupDescription" : "Web application security group",
       "GroupName" : "application",
       "VpcId" : {"Ref" : "myVPC"},
       "SecurityGroupIngress" : [
        { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0",  "Description" : "HTTP Port" },
        { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : "0.0.0.0/0",  "Description" : "SSH Port" },
        { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0", "Description" : "HTTPS Port" }
      ]
     }
   },


   "databaseSG" : {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
      "GroupDescription" : "Database security group",
      "GroupName" : "database",
      "VpcId" : {"Ref" : "myVPC"}
    }

  },

  "databaseSGIngress" : {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "GroupId": { "Ref": "databaseSG" },
    "IpProtocol": "tcp",
    "FromPort": 5432,
    "ToPort": 5432,
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "InstanceSecurityGroup",
      "GroupId"
    ]
   }
 } 
},



"BucketIAMPolicy" : {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
    "ManagedPolicyName": "WebAppS3",
    "Description" : "Policy to manage S3 bucket",
    "PolicyDocument": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [ "s3:*" ],
          "Resource": { "Fn::Join": [ "", ["arn:aws:s3:::",{"Ref": "S3Bucket"},"/*"]]}

        }
      ]
    }

  }
},






"IAMRoleBucket" : {
  "Type" : "AWS::IAM::Role",
  "Properties" : {
    "RoleName" : "EC2-CSYE6225123",
    "Description" : "Role to access S3 Bucket",
    "AssumeRolePolicyDocument": {
     "Version" : "2012-10-17",
     "Statement": [ {
      "Effect": "Allow",
      "Principal": {
       "Service": [ "ec2.amazonaws.com" ]
     },
     "Action": [ "sts:AssumeRole" ]
   } ]
   },
   "ManagedPolicyArns": [{"Ref" : "BucketIAMPolicy"}]

 }
},

"MyInstanceProfile": {
 "Type": "AWS::IAM::InstanceProfile",
 "Properties": {
  "Roles": [ 
    {
      "Ref" : "CodeDeployEC2ServiceRole"
    }
  ]
}
},



"S3Bucket" : {
 "Type" : "AWS::S3::Bucket",
 "Properties": {
   "AccessControl" : "Private",
   "BucketEncryption": {
    "ServerSideEncryptionConfiguration": [
      {
        "ServerSideEncryptionByDefault": {
          "SSEAlgorithm": "AES256"
        }
      }
    ]
  },
  "LifecycleConfiguration" : { 
   "Rules" : 
   [ 
    {
      "Status" : "Enabled",
      "Transitions" : 
      [
       {
         "StorageClass" : "STANDARD_IA",
         "TransitionInDays" : 30
       }
     ]
    } 
  ] 
 }
}
},



"DBSubnetGroup" : {
  "Type" : "AWS::RDS::DBSubnetGroup",
  "Properties" : {
   "DBSubnetGroupDescription" : "Subnet group for DBS",
   "DBSubnetGroupName" : "DBSubnet",
   "SubnetIds": [ {"Ref":"mySubnetRegion1"},
     {"Ref":"mySubnetRegion3"}
   ],
   "Tags": [
    {
      "Key": "db",
      "Value": "dbsubnet"
    }
  ]
 }
},

"RDSInstance" : {
  "Type" : "AWS::RDS::DBInstance",
  "Properties" : {
    "Engine" : "postgres",
    "DBInstanceClass" : "db.t3.micro",
    "MultiAZ" : false,
    "DBInstanceIdentifier" : "csye6225-spring2020",
    "MasterUsername" : {"Ref": "dbuser"},
    "MasterUserPassword" : {"Ref":"dbpswd"},
    "DBSubnetGroupName" : {"Ref" : "DBSubnetGroup"},
    "PubliclyAccessible" : false,
    "DBName" : "csye6225",
    "VPCSecurityGroups" : [{"Ref":"databaseSG"}],
    "AllocatedStorage": {"Ref":"RDSInstanceSize"}

  }
},

"CodeDeployEC2S3" : {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
    "ManagedPolicyName": "CodeDeployEC2S3",
    "Description" : "Policy to allows EC2 instances to read data from S3 buckets",
    "PolicyDocument": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [ "s3:Get*", "s3:List*"],
          "Resource": "arn:aws:s3:::codedeploy.divya-girase.me/*"

        }
      ]
    }

  }
},


"AWSCircleciPolicy" : {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
    "ManagedPolicyName": "AWSCircleciPolicy",
    "Description" : "Policy for circleci user with minimum privileges",
    "PolicyDocument": {
      "Version": "2012-10-17",
      "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AttachVolume",
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:CopyImage",
          "ec2:CreateImage",
          "ec2:CreateKeypair",
          "ec2:CreateSecurityGroup",
          "ec2:CreateSnapshot",
          "ec2:CreateTags",
          "ec2:CreateVolume",
          "ec2:DeleteKeyPair",
          "ec2:DeleteSecurityGroup",
          "ec2:DeleteSnapshot",
          "ec2:DeleteVolume",
          "ec2:DeregisterImage",
          "ec2:DescribeImageAttribute",
          "ec2:DescribeImages",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeRegions",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSnapshots",
          "ec2:DescribeSubnets",
          "ec2:DescribeTags",
          "ec2:DescribeVolumes",
          "ec2:DetachVolume",
          "ec2:GetPasswordData",
          "ec2:ModifyImageAttribute",
          "ec2:ModifyInstanceAttribute",
          "ec2:ModifySnapshotAttribute",
          "ec2:RegisterImage",
          "ec2:RunInstances",
          "ec2:StopInstances",
          "ec2:TerminateInstances"
        ],
         "Resource": "*"
       }
     ]
    },
    "Users" : ["circleci"]
  }

},


"CircleCIUploadToS3" : {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
    "ManagedPolicyName": "CircleCIUploadToS3",
    "Description" : "Policy to allow CircleCI to upload artifacts from latest successful build to dedicated S3 bucket used by CodeDeploy",
    "PolicyDocument": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": ["s3:PutObject", "s3:Get*", "s3:List*"],
          "Resource": "arn:aws:s3:::codedeploy.divya-girase.me/*"
        }
      ]
    },
    "Users" : ["circleci"]

  }
},

"CircleCiLambda":{
 "Type": "AWS::IAM::ManagedPolicy",
 "Properties": {
  "ManagedPolicyName": "CircleCiLambda",
  "Description" : "Policy to allow CircleCI to call Code Update on lambda",
  "PolicyDocument": {
    "Version": "2012-10-17",
    "Statement": [{
      "Effect": "Allow",
      "Action": "lambda:UpdateFunctionCode",
      "Resource" : { "Fn::Join": [ "", ["arn:aws:lambda:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":function:MailClient"]]}
    }
  ]
  },
  "Users" : ["circleci"]
}
},

"CircleCICodeDeploy" : {
  "Type": "AWS::IAM::ManagedPolicy",
  "Properties": {
    "ManagedPolicyName": "CircleCICodeDeploy",
    "Description" : "Policy to allow CircleCI to call CodeDeploy APIs to initiate application deployment on EC2 instances",
    "PolicyDocument": {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "codedeploy:GetApplicationRevision",
            "codedeploy:RegisterApplicationRevision"
          ],
          "Resource": { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":application:csye6225-webapp"]]}
        },

        {
          "Effect": "Allow",
          "Action": "codedeploy:GetDeploymentConfig",
          "Resource": [
            { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":deploymentconfig:CodeDeployDefault.OneAtATime"]]},
            { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":deploymentconfig:CodeDeployDefault.HalfAtATime"]]},
            { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":deploymentconfig:CodeDeployDefault.AllAtOnce"]]}
          ]
        },

        {
          "Effect": "Allow",
          "Action": "codedeploy:GetApplication",
          "Resource": { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":application:csye6225-webapp"]]}
        },

        {
          "Effect": "Allow",
          "Action": "codedeploy:GetDeploymentGroup",
          "Resource": { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":deploymentgroup:csye6225-webapp/csye6225webappdeployment"]]}
        },

        {
          "Effect": "Allow",
          "Action": "codedeploy:CreateDeployment",
          "Resource": { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":deploymentgroup:csye6225-webapp/csye6225webappdeployment"]]}
        },                                         

        {
          "Effect": "Allow",
          "Action": "codedeploy:GetDeployment",
          "Resource": { "Fn::Join": [ "", ["arn:aws:codedeploy:", {"Ref": "AWSRegion"}, ":", {"Ref": "AccountID"}, ":deploymentgroup:csye6225-webapp/csye6225webappdeployment"]]}
        }

      ]
    },
    "Users" : ["circleci"]
  }
},



"CodeDeployEC2ServiceRole" : {
  "Type" : "AWS::IAM::Role",
  "Properties" : {
    "RoleName" : "CodeDeployEC2ServiceRole",
    "Description" : "Role for EC2 instances that will be used to host web application",
    "AssumeRolePolicyDocument": {
     "Version" : "2012-10-17",
     "Statement": [ {
      "Effect": "Allow",
      "Principal": {
       "Service": [ "ec2.amazonaws.com" ]
     },
     "Action": [ "sts:AssumeRole" ]
   } ]
   },
   "ManagedPolicyArns": [{"Ref" : "CodeDeployEC2S3"}, {"Ref" : "BucketIAMPolicy"}, "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
    "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
    "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
  ]


 }
},

"CodeDeployServiceRole" : {
  "Type" : "AWS::IAM::Role",
  "Properties" : {
    "RoleName" : "CodeDeployServiceRole",
    "Description" : "Role for EC2 instances that will be used to host web application",
    "AssumeRolePolicyDocument": {
     "Version" : "2012-10-17",
     "Statement": [ {
      "Effect": "Allow",
      "Principal": {
       "Service": [ "codedeploy.amazonaws.com" ]
     },
     "Action": [ "sts:AssumeRole" ]
   } ]
   },
   "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"]

 }
},

"CodeDeployApplication": {
  "Type": "AWS::CodeDeploy::Application",
  "Properties": {
    "ApplicationName" : "csye6225-webapp",
    "ComputePlatform" : "Server"
  }
},

"CodeDeployDeploymentGroup" : {
  "Type" : "AWS::CodeDeploy::DeploymentGroup",
  "Properties" : {
    "DeploymentGroupName" : "csye6225webappdeployment",
    "ApplicationName": { "Ref": "CodeDeployApplication" },
    "AutoScalingGroups" : [ {"Ref" : "WebappAutoScaleGroup" } ],   
    "ServiceRoleArn" :{ "Fn::GetAtt" : [ "CodeDeployServiceRole",  "Arn" ] },
    "DeploymentStyle" : {
      "DeploymentOption" : "WITHOUT_TRAFFIC_CONTROL",
      "DeploymentType" : "IN_PLACE"
      

    },
    "LoadBalancerInfo" : {
      "TargetGroupInfoList" : [{"Name" : { "Fn::GetAtt" : [ "LoadBalancerGroup",  "TargetGroupName" ] }}]
    },
    "DeploymentConfigName" : "CodeDeployDefault.AllAtOnce",
    "AutoRollbackConfiguration" : { "Enabled" : true, "Events" : [ "DEPLOYMENT_FAILURE" ]},
    "Ec2TagFilters": [ 
      {
        "Key": "Name",
        "Value": "myEC2",
        "Type": "KEY_AND_VALUE"
      } 
    ] 
  }

},

"LaunchConfiguration" : {
  "Type" : "AWS::AutoScaling::LaunchConfiguration",
  "Properties" : {
    "AssociatePublicIpAddress" : true,
    "ImageId" : {"Ref" : "AMIID"},
    "KeyName" : "awsprod",
    "InstanceType" : "t2.micro",
    "BlockDeviceMappings" :  [
     {
      "DeviceName" : "/dev/sda1",
      "Ebs" : {
        "VolumeType" : "gp2",
        "DeleteOnTermination" : "true",
        "VolumeSize" : {"Ref":"EC2InstanceSize"}
      }
    }
  ],

    "IamInstanceProfile" : {"Ref" : "MyInstanceProfile"},
    "LaunchConfigurationName" : "webapp_launch",
    "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
    "UserData" : {
      "Fn::Base64" : {
        "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "echo DBHostname.url=",{"Fn::GetAtt": ["RDSInstance","Endpoint.Address"]}," >> /home/ubuntu/webapp.properties\n",
          "echo DBUsername.url=",{"Ref":"dbuser"}," >> /home/ubuntu/webapp.properties\n",
          "echo S3Bucket=",{"Ref":"S3Bucket"}," >> /home/ubuntu/webapp.properties\n",
          "echo DBUserPassword.url=",{"Ref":"dbuser"}," >> /home/ubuntu/webapp.properties\n",
          "echo SQS.region=",{"Ref": "AWSRegion"}," >> /home/ubuntu/webapp.properties\n",
          "echo SNS.region=",{"Ref": "AWSRegion"}," >> /home/ubuntu/webapp.properties\n",
          "echo SQS.arn=",{"Ref":"mySQS"}," >> /home/ubuntu/webapp.properties\n",
          "echo SNS.Topic=",{"Ref":"SNSTopic"}," >> /home/ubuntu/webapp.properties\n",
          "Database=",{"Fn::GetAtt" : ["RDSInstance","Endpoint.Address"]},"&",
          "DBUser=",{"Ref":"dbuser"}, "&",
          "DBPassword=",{"Ref":"dbpswd"}, "&",
          "S3Bucket=",{ "Fn::Join": [ "", ["arn:aws:s3:::",{"Ref": "S3Bucket"},"/*"]]}


        ]
      ]
      }
    }
  }
},

"WebappAutoScaleGroup" : {
  "Type" : "AWS::AutoScaling::AutoScalingGroup",
  "Properties" : {
    "AutoScalingGroupName" : "WebappAutoScaleGroup",
    "Cooldown" : "60",
    "DesiredCapacity" : "2", 
    "LaunchConfigurationName" : {"Ref" : "LaunchConfiguration"},
    "MaxSize" : "5",
    "MinSize" : "2",
    "Tags" : [{
      "Key":"Name",
      "Value":"myEC2",
      "PropagateAtLaunch":"true"
    }],
    "TargetGroupARNs" : [ {"Ref" : "LoadBalancerGroup"}],
    "VPCZoneIdentifier" : [ {"Ref" : "mySubnetRegion1"}, {"Ref" : "mySubnetRegion2"}, {"Ref" : "mySubnetRegion3"} ]
  }
},


"InstanceSecurityGroup" : {
  "Type" : "AWS::EC2::SecurityGroup",
  "Properties" : {
    "GroupDescription" : "Enable HTTP from the load balancer only",
    "SecurityGroupIngress" : [
      {
        "IpProtocol" : "tcp",
        "FromPort" : "80",
        "ToPort" : "80",
        "SourceSecurityGroupId" : {"Fn::Select" : [0, {"Fn::GetAtt" : ["myLoadBalancer", "SecurityGroups"]}]}
      } ],
    "VpcId" : { "Ref" : "myVPC" }
  }
  
},


"myLoadBalancer" : {
  "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
  "Properties" : {
    "Name" : "myLoadBalancer",
    "Subnets" : [ {"Ref" : "mySubnetRegion1"}, {"Ref" : "mySubnetRegion2"}, {"Ref" : "mySubnetRegion3"} ],
    "Type" : "application",
    "SecurityGroups" : [{"Ref":"webappSG"}]
  }
},

"LoadBalancerListener" : {
  "Type" : "AWS::ElasticLoadBalancingV2::Listener",
  "Properties" : {

   "DefaultActions": [
    {
      "Type": "forward",
      "TargetGroupArn" : {"Ref" : "LoadBalancerGroup"}
    }
  ],
   "LoadBalancerArn" : {"Ref" : "myLoadBalancer"},
   "Port" : 80,
   "Protocol" : "HTTP"

 }
},

"LoadBalancerGroup" : {
  "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
  "Properties" : {
    "Name" : "LoadBalancerGroup",
    "Port" : 80,
    "Protocol" : "HTTP",
    "Tags" : [ {
      "Key" : "Name",
      "Value" : "LoadBalancerGroup"
    } ],
    "VpcId" : { "Ref": "myVPC" }
  }
},

"WebServerScaleUpPolicy": {
  "Type": "AWS::AutoScaling::ScalingPolicy",
  "Properties": {
    "AdjustmentType": "ChangeInCapacity",
    "AutoScalingGroupName": {
      "Ref": "WebappAutoScaleGroup"
    },
    "Cooldown": "60",
    "ScalingAdjustment": "1"
  }
},

"WebServerScaleDownPolicy": {
  "Type": "AWS::AutoScaling::ScalingPolicy",
  "Properties": {
    "AdjustmentType": "ChangeInCapacity",
    "AutoScalingGroupName": {
      "Ref": "WebappAutoScaleGroup"
    },
    "Cooldown": "60",
    "ScalingAdjustment": "-1"
  }
},

"CPUAlarmHigh": {
  "Type": "AWS::CloudWatch::Alarm",
  "Properties": {
    "AlarmDescription": "Scale-up if CPU > 5% for 10 minutes",
    "MetricName": "CPUUtilization",
    "Namespace": "AWS/EC2",
    "Statistic": "Average",
    "Period": "300",
    "EvaluationPeriods": "2",
    "Threshold": "5",
    "AlarmActions": [
      {
        "Ref": "WebServerScaleUpPolicy"
      }
    ],
    "Dimensions": [
      {
        "Name": "AutoScalingGroupName",
        "Value": {
          "Ref": "WebappAutoScaleGroup"
        }
      }
    ],
    "ComparisonOperator": "GreaterThanThreshold"
  }
},

"CPUAlarmLow": {
  "Type": "AWS::CloudWatch::Alarm",
  "Properties": {
    "AlarmDescription": "Scale-down if CPU < 3% for 10 minutes",
    "MetricName": "CPUUtilization",
    "Namespace": "AWS/EC2",
    "Statistic": "Average",
    "Period": "300",
    "EvaluationPeriods": "2",
    "Threshold": "3",
    "AlarmActions": [
      {
        "Ref": "WebServerScaleDownPolicy"
      }
    ],
    "Dimensions": [
      {
        "Name": "AutoScalingGroupName",
        "Value": {
          "Ref": "WebappAutoScaleGroup"
        }
      }
    ],
    "ComparisonOperator": "LessThanThreshold"
  }
},



"myDNSRecord" : {
 "Type" : "AWS::Route53::RecordSet",
 "Properties" : {
  "AliasTarget" : {
    "DNSName" : {"Fn::GetAtt": [ "myLoadBalancer","DNSName" ] },
    "HostedZoneId" : {"Fn::GetAtt": [ "myLoadBalancer","CanonicalHostedZoneID" ] }
  },
  "HostedZoneId" : "Z25N2Z9Z2BMWC5",
  "Name" : "prod.divya-girase.me.",
  "Type" : "A"
}
},

"SNSTopic" : {
  "Type" : "AWS::SNS::Topic",
  "Properties" : {
    "DisplayName" : "CSYETopic",
    "TopicName" : "CSYETopic",
    "Subscription" : [{
      "Endpoint" : { "Fn::GetAtt" : [ "AWSLambda", "Arn" ] },
      "Protocol" : "lambda"
    }]
  }
},


"AWSLambda" : {
  "Type" : "AWS::Lambda::Function",
  "Properties" : {
    "Code" : {
      "ZipFile" : "DEPLOY SERVLERLESS BRANCH TO UPDATE CODE"
    },
    "Description" : "AWS Lambda function to send mail",
    "FunctionName" : "MailClient",
    "Runtime" : "python2.7",
    "Handler":"index.lambda_handler",
    "Role": {"Fn::GetAtt" : ["SNSLambdaRole", "Arn"] },
    "MemorySize":512,
    "Timeout" :30
    
  }
},

"AWSLambdaInvocation": {
  "Type": "AWS::Lambda::Permission",
  "Properties": {
    "FunctionName": { "Fn::GetAtt": ["AWSLambda","Arn"]},
    "Action": "lambda:InvokeFunction",
    "Principal": "sns.amazonaws.com",
    "SourceArn": {"Ref": "SNSTopic"}
  }
},



"SNSLambdaRole" : {
  "Type" : "AWS::IAM::Role",
  "Properties" : {
   "Description" : "Role for Lambda to access dynamodb, cloudwatch and sns",
   "AssumeRolePolicyDocument": {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": [
            "lambda.amazonaws.com"
          ]
        },
        "Action": [
          "sts:AssumeRole"
        ]
      }
    ]
  },
  "ManagedPolicyArns" : [
    "arn:aws:iam::aws:policy/CloudWatchFullAccess", 
    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess", 
    "arn:aws:iam::aws:policy/AmazonSESFullAccess"
  ],
  "RoleName" : "SNSLambdaRole"    

}

},

"mySQS" : {
  "Type" : "AWS::SQS::Queue",
  "Properties" : {
   "QueueName" : "mySQS",
 }
},

"DynamoDB" : {
  "Type" : "AWS::DynamoDB::Table",
  "Properties" : {
    "AttributeDefinitions" : [
      {
        "AttributeName" : "username",
        "AttributeType" : "S"        
      }
    ],
    "KeySchema" : [{
      
      "AttributeName" : "username",
      "KeyType" : "HASH"
    }],
    "ProvisionedThroughput" : {
      "ReadCapacityUnits" : "5",
      "WriteCapacityUnits" : "5"
    },
    "TableName" : "Tokens",
    "TimeToLiveSpecification" : {
      "AttributeName" : "timetolive",
      "Enabled" : true
    }

  }
}



}


}

